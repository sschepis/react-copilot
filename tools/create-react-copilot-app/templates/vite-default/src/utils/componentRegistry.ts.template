import React from 'react';
import fs from 'fs';

/**
 * Component registry for managing modifiable components
 * This registry stores the source code of components, allowing the LLM
 * to understand and modify them
 */
class ComponentRegistry {
  private componentSources: Record<string, string> = {};
  private componentsDir = '/src/components/';
  
  /**
   * Registers a component by name and adds its source code to the registry
   * @param name Component name
   * @param sourceCode Source code of the component as a string
   */
  registerComponent(name: string, sourceCode: string) {
    this.componentSources[name] = sourceCode;
  }
  
  /**
   * Gets the source code for a component
   * @param name Component name
   * @returns Source code as a string or undefined if not found
   */
  getComponentSource(name: string): string | undefined {
    return this.componentSources[name];
  }
  
  /**
   * Auto-registers all components from the components directory
   * This reads the source files and registers them by name
   */
  async autoRegisterComponents() {
    try {
      // In a real environment, we would use fs.readdir and fs.readFile to read
      // component files dynamically. For this template, components are pre-registered
      // in the initializeRegistry function below.
      console.log('Auto-registered components from directory');
    } catch (error) {
      console.error('Error auto-registering components:', error);
    }
  }
}

// Create and export the registry instance
export const componentRegistry = new ComponentRegistry();

/**
 * Initialize the registry with all components
 * This function is called at app startup to register all components
 */
export function initializeRegistry() {
  // Register Card component
  componentRegistry.registerComponent(
    'Card',
    `import React from 'react';
import { useRegisteredComponent } from '../hooks/useRegisteredComponent';
import './Card.css';

export interface CardProps {
  title: string;
  content: string;
}

/**
 * Card component for displaying information
 */
function Card({ title, content }: CardProps) {
  const { ref } = useRegisteredComponent('Card');

  return (
    <div ref={ref} className="Card">
      <h3>{title}</h3>
      <p>{content}</p>
    </div>
  );
}

export default Card;`
  );
  
  // Register Dashboard component
  componentRegistry.registerComponent(
    'Dashboard',
    `import React from 'react';
import { useRegisteredComponent } from '../hooks/useRegisteredComponent';
import Card from './Card';
import './Dashboard.css';

/**
 * Dashboard component that serves as the main view
 */
function Dashboard() {
  const { ref } = useRegisteredComponent('Dashboard');
  
  return (
    <div ref={ref} className="Dashboard">
      <h2>Welcome to your React Copilot App</h2>
      <p>This component can be modified by the LLM through the chat interface.</p>
      <div className="Dashboard-cards">
        <Card title="Features" content="Try asking the AI to add new components or modify existing ones." />
        <Card title="Plugins" content="This app includes several plugins that extend its capabilities." />
        <Card title="Examples" content="Try asking: 'Add a dark mode toggle' or 'Create a user profile section'." />
      </div>
    </div>
  );
}`
  );
  
  // Additional components can be registered here
}